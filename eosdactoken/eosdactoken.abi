{
	"version": "eosio::abi/1.0",
	"types": [{
		"new_type_name": "account_name",
		"type": "name"
	}],
	"structs": [{
		"name": "updateterms",
		"base": "",
		"fields": [{
			"name": "termsid",
			"type": "int64"
		}, {
			"name": "newterms",
			"type": "string"
		}]
	}, {
		"name": "termsinfo",
		"base": "",
		"fields": [{
				"name": "terms",
				"type": "string"
			},
			{
				"name": "hash",
				"type": "string"
			},
			{
				"name": "version",
				"type": "int64"
			}
		]
	}, {
		"name": "transfer",
		"base": "",
		"fields": [{
				"name": "from",
				"type": "account_name"
			},
			{
				"name": "to",
				"type": "account_name"
			},
			{
				"name": "quantity",
				"type": "asset"
			},
			{
				"name": "memo",
				"type": "string"
			}
		]
	}, {
		"name": "member",
		"base": "",
		"fields": [{
				"name": "sender",
				"type": "account_name"
			},
			{
				"name": "agreedterms",
				"type": "int64"
			}
		]
	}, {
		"name": "memberreg",
		"base": "",
		"fields": [{
				"name": "sender",
				"type": "account_name"
			},
			{
				"name": "agreedterms",
				"type": "string"
			}
		]
	}, {
		"name": "memberunreg",
		"base": "",
		"fields": [{
			"name": "sender",
			"type": "account_name"
		}]
	}, {
		"name": "create",
		"base": "",
		"fields": [{
				"name": "issuer",
				"type": "account_name"
			},
			{
				"name": "maximum_supply",
				"type": "asset"
			},
			{
				"name": "transfer_locked",
				"type": "bool"
			}
		]
	}, {
		"name": "unlock",
		"base": "",
		"fields": [{
			"name": "unlock",
			"type": "asset"
		}]
	}, {
		"name": "newmemterms",
		"base": "",
		"fields": [{
				"name": "terms",
				"type": "string"
			},
			{
				"name": "hash",
				"type": "string"
			}
		]
	}, {
		"name": "burn",
		"base": "",
		"fields": [{
				"name": "from",
				"type": "account_name"
			},
			{
				"name": "quantity",
				"type": "asset"
			}
		]
	}, {
		"name": "issue",
		"base": "",
		"fields": [{
				"name": "to",
				"type": "account_name"
			},
			{
				"name": "quantity",
				"type": "asset"
			},
			{
				"name": "memo",
				"type": "string"
			}
		]
	}, {
		"name": "account",
		"base": "",
		"fields": [{
			"name": "balance",
			"type": "asset"
		}]
	}, {
		"name": "currency_stats",
		"base": "",
		"fields": [{
				"name": "supply",
				"type": "asset"
			},
			{
				"name": "max_supply",
				"type": "asset"
			},
			{
				"name": "issuer",
				"type": "account_name"
			},
			{
				"name": "transfer_locked",
				"type": "bool"
			}
		]
	}, {
		"name": "updateconfig",
		"base": "",
		"fields": [{
			"name": "notifycontr",
			"type": "name"
		}]
	}],
	"actions": [{
		"name": "updateterms",
		"type": "updateterms",
		"ricardian_contract": "## ACTION: updateterms\n**PARAMETERS:** __termsid__ is a whole number, __newterms__ is a text string with a maximum of 256 characters.\n**INTENT:** The intent of {{ updateterms }} is to change the URL link specifying where the terms of a pre-existing record of member terms are located, associated with the given version {{ termsid }}.\n**TERM:** The update terms action lasts until it is superceded by a subsequent action."
	}, {
		"name": "transfer",
		"type": "transfer",
		"ricardian_contract": "## ACTION: transfer\n**PARAMETERS:** __from__ is a type of eosio account_name, __to__ is a type of eosio account_name, __quantity__ is a type of eosio asset, __memo__ is a string with a maximum of 256 characters\n**INTENT:** The intent of {{ transfer }} is to allow an account {{ from }} to send {{ quantity }} tokens to another account {{ to }}.  A note {{ memo }} can be sent to the receiver.\n**TERM:** The transfer action represents a change in the asset balances of the accounts involved in the transaction."
	}, {
		"name": "issue",
		"type": "issue",
		"ricardian_contract": "## ACTION: issue\n**PARAMETERS:** __to__ is a type of eosio accountname , __quantity__ is a type of eosio asset, __memo__ is a string with a maximum of 256 charaters\n**INTENT:** The intent of {{ issue }} is to issue tokens {{ quantity }} and send them to the account specified {{ to }} using the transfer action. This requires a privilaged account. A note {{ memo }} can be sent to the receiver.\n**TERM:** The action lasts for the duration of the processing of the contract."
	}, {
		"name": "create",
		"type": "create",
		"ricardian_contract": "## ACTION: create\n **PARAMETERS:** __issuer__ is a type of eosio account_name , __maximum_supply__ is a type of asset, __transferred_locked__ is either 1 (true) or 0 (false) \n **INTENT:** The intent of {{ create }} is to create a new token with a {{ maximum supply }} as indicated. The asset is created in the format of {{ number of tokens to 4 decimal places <space>  token symbol }} for example 1000.0000 DAC will create a DAC token with a maximum number of units of 1000.0000. If {{ transfer_locked }} is set to true then only the issuer may use the transfer action. \n **TERM:** The act of creation of this asset will expires at the conclusion of code execution. The asset will then persist on the deployed contract as long as it is active."
	}, {
		"name": "burn",
		"type": "burn",
		"ricardian_contract": "## ACTION: burn\n**PARAMETERS:** __quantity__ is a type of eosio asset\n**INTENT:** The intent of {{ burn }} is to allow a user to burn {{ quantity }} tokens that belong to them. \n**TERM:** The action lasts for the duration of the processing of the contract. The reduction in token supply persists on the deployed contract as long as it is active."
	}, {
		"name": "unlock",
		"type": "unlock",
		"ricardian_contract": "## ACTION: unlock\n**PARAMETERS:** __unlock__ is a type of asset\n**INTENT:** The intent of {{ unlock }} is to unlock a token to allow transfers from accounts other than the token creator. The parameter passed in must be a standard asset in the form of \" 1000.0000 ABC\". Although the amount component eg. 1000.000 is ignored for the logic it is required for the format of an asset parameter. This can only be done once to unlock a token and cannot be reversed to lock a token again.\n**TERM:** The act of unlocking transfer on this asset will expires at the conclusion of code execution. Transfer functionality for the asset will then persist on the deployed contract as long as it is active."
	}, {
		"name": "newmemterms",
		"type": "newmemterms",
		"ricardian_contract": "## ACTION: newmemterms\n**PARAMETERS:** __terms__ is a string with a maximum of 256 charaters containing a url to a member terms document. __hash__ is a string with a maximum of 32 characters containing the md5 hash of the terms document.\n**INTENT:** The intent of newmemberterms is to update the terms of the DAC. It will update an internal database of member terms. This action can be called multiple times to add revisions to the DAC terms.\n**TERM:** This action lasts for the duration of the processing of the contract. The memberterm will persist on the deployed contract as long as it is active or superceeded by an updated newmemberterms action."
	}, {
		"name": "memberreg",
		"type": "memberreg",
		"ricardian_contract": "## ACTION: memberreg\n**PARAMETERS:** __sender__ is a type of eosio account_name , __agreedterms__ is the md5 hash of the current agreed member terms document. \n**INTENT:** The intent of memberreg is to register the account and indicate that the account has agreed to the current terms of the DAC. It will validate that the agreed terms are current and update an internal database of member accounts. It can be called multiple times to update the agreed terms.\n**TERM:** This action lasts for the duration of the processing of the contract. The member registration will persist on the deployed contract as long as it is active or superceeded by an updated memberreg or memberunreg action."
	}, {
		"name": "memberunreg",
		"type": "memberunreg",
		"ricardian_contract": "## ACTION: memberunreg\n**PARAMETERS:** __sender__ is a type of eosio account_name\n**INTENT:** The intent of memberunreg is to allow an account {{ sender }} to unregister its membership.\n**TERM:** This action lasts for the duration of the processing of the contract. The action will persist on the deployed contract as long as it is active or superceeded by an updated memberreg action."
	}, {
		"name": "updateconfig",
		"type": "updateconfig",
		"ricardian_contract": "## ACTION: memberunreg\n**PARAMETERS:** __sender__ is a type of eosio account_name\n**INTENT:** The intent of updateconfig is to allow an admin account {{ sender }} to update configuration settings on the contract.\n**TERM:** This action lasts for the duration of the processing of the contract. The action will persist on the deployed contract as long as it is active or superceeded by an updated memberreg action."
	}],
	"tables": [{
		"name": "memberterms",
		"type": "termsinfo",
		"index_type": "i64",
		"key_names": ["currency"],
		"key_types": ["uint64"]
	}, {
		"name": "accounts",
		"type": "account",
		"index_type": "i64",
		"key_names": ["currency"],
		"key_types": ["uint64"]
	}, {
		"name": "stat",
		"type": "currency_stats",
		"index_type": "i64",
		"key_names": ["currency"],
		"key_types": ["uint64"]
	}, {
		"name": "members",
		"type": "member",
		"index_type": "i64",
		"key_names": ["sender"],
		"key_types": ["uint64"]
	}, {
		"name": "config",
		"index_type": "i64",
		"key_names": [
			"config"
		],
		"key_types": [
			"name"
		],
		"type": "updateconfig"
	}],
	"ricardian_clauses": [{
			"id": "entire_agreement",
			"body": "## ENTIRE AGREEMENT.\nThis contract contains the entire agreement of the parties, for all described actions, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This contract supersedes any prior written or oral agreements between the parties. "
		},
		{
			"id": "binding_constitution",
			"body": "## BINDING CONSTITUTION:\nAll the the action descibed in this contract are subject to the EOSDAC consitution as held at http://eosdac.io . This includes, but is not limited to membership terms and condiutions, dispute resolution and severability."
		}
	],
	"abi_extensions": []
}
